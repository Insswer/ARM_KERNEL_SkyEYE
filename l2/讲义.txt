目标：简单学习Makefile以及链接脚本的概念，学习编写scatter内存布局的连接脚本写法，学习链接地址和物理地址的区别。
		1) 简单介绍链接脚本和Makefile的写法。
		
		2) 学习链接地址和物理地址的区别。
		
(1) Makefile

规则：用于说明如何生成一个或多个目标文件，规则格式如下：

目标：依赖
	命令

注意：命令必须用TAB键开始


makefile中把那些没有任务依赖只有执行动作的目标称为“伪目标”
例如：
.PHONY:clean
clean:
	rm -f hello main.o func1.o func2.o
用".PHONY"来将clean目标声明为伪目标

为什么要伪目标？
答：这主要是防止目标和文件重名的情况。

在makefile中，存在系统默认的自动变量:
$^：代表所有的依赖文件
$@：代表规则目标
$<：代表第一个依赖文件

Makefile的赋值方式

immediate = deferred
immediate ?= deferred
immediate := deferred
immediate += deferred or immediate
define immediate
deferred
endef

使用=,?=,define指令都是延时变量
使用:=是立即变量，?=用来定义第一次出现的延时变量

(2) 链接脚本

text段
data段
bss段

可以通过readelf -a的命令

(3) 链接地址与物理地址

链接地址为程序中标号所在的地址，什么是标号？
标号指的是函数，数据结构等的绝对位置。
当程序代码包含绝对跳转时，如果链接地址不在物理地址上，
那么将发生错误。

常见的问题出现在bootloader中，当系统中的内存控制器没有
初始化完成时，是不允许访问内存空间的。

通常系统采用多级bootloader的形式：

一级bootloader采用相对访存指令编写，调用的函数均采用相对地址
调用。由于最后程序是运行在ram中的，所以此时所有标号的虚拟地址均
在内存中。如果使用这些内存地址访问这些函数，就会导致系统崩溃。






